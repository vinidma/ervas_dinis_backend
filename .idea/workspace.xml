<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e64d449d-b622-40e7-9d3d-f966d661d0c3" name="Changes" comment="feat: Finaliza CRUD da API de Categorias e refatora camadas&#10;&#10;Finaliza a implementação de todas as operações CRUD (Create, Read, Update, Delete) para o recurso de Categorias, deixando a funcionalidade completa.&#10;&#10;- Implementação dos endpoints:&#10;  - `GET /categorias/` para listar todas as categorias.&#10;  - `GET /categorias/&lt;id&gt;` para buscar uma categoria específica.&#10;  - `PUT /categorias/&lt;id&gt;` para atualizar uma categoria.&#10;  - `DELETE /categorias/&lt;id&gt;` para deletar uma categoria.&#10;&#10;- Realizada refatoração crucial para alinhar as responsabilidades das camadas, movendo a lógica de acesso ao banco de dados que estava no Service para o Repository.&#10;&#10;- Correção do erro de `AttributeError` causado pela indentação incorreta dos métodos na classe `CategoriaService`, garantindo que a arquitetura esteja corretamente implementada.">
      <change afterPath="$PROJECT_DIR$/app/features/produtos/__init__.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/features/produtos/produto_controller.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/features/produtos/produto_model.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/features/produtos/produto_repository.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/features/produtos/produto_service.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/ervas_dinis_backend.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/ervas_dinis_backend.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/__init__.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/__init__.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/db/database.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/db/database.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/app/features/produtos/__init__.py" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 8
}</component>
  <component name="ProjectId" id="2y37KFrAbcZ3zMA0cNNzpTcuvpR" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Python.__init__.executor": "Debug",
    "Python.categoria_controller.executor": "Run",
    "Python.categoria_service.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "git-widget-placeholder": "main",
    "ignore.virus.scanning.warn.message": "true",
    "last_opened_file_path": "C:/ervas_dinis_backend"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\ervas_dinis_backend\app\features" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="__init__" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="ervas_dinis_backend" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/app/features/produtos" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/app/features/produtos/__init__.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.__init__" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-4f4e415b4190-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.26053.29" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e64d449d-b622-40e7-9d3d-f966d661d0c3" name="Changes" comment="" />
      <created>1749051337324</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1749051337324</updated>
    </task>
    <task id="LOCAL-00001" summary="iniciando projeto">
      <option name="closed" value="true" />
      <created>1749159633323</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1749159633323</updated>
    </task>
    <task id="LOCAL-00002" summary="continuação do projeto&#10;&#10;- separar por categorias para melhor visão do trabalho no geral">
      <option name="closed" value="true" />
      <created>1749238352161</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1749238352161</updated>
    </task>
    <task id="LOCAL-00003" summary="continuação do projeto&#10;&#10;- separar por categorias para melhor visão do trabalho no geral">
      <option name="closed" value="true" />
      <created>1749238453652</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1749238453652</updated>
    </task>
    <task id="LOCAL-00004" summary="feat: Implementa CRUD inicial de Categorias com Injeção de Dependência&#10;&#10;Este commit estabelece a primeira funcionalidade completa da API,&#10;permitindo a criação e listagem de categorias de produtos.&#10;&#10;Principais mudanças:&#10;- Criação do endpoint `POST /api/v1/categorias/` para adicionar novas categorias.&#10;- Criação do endpoint `GET /api/v1/categorias/` para listar todas as categorias cadastradas.&#10;- Implementação completa da arquitetura em camadas (Controller, Service, Repository, Model) para a funcionalidade de Categorias.&#10;- Refatoração do gerenciamento de dependências para utilizar o contexto do Flask (`g`) e hooks (`before_request`), desacoplando o controller da criação de serviços e repositórios.&#10;- Centralização do gerenciamento da conexão com o banco de dados (SQLite).">
      <option name="closed" value="true" />
      <created>1749502399483</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1749502399483</updated>
    </task>
    <task id="LOCAL-00005" summary="feat: Finaliza CRUD da API de Categorias e refatora camadas&#10;&#10;Finaliza a implementação de todas as operações CRUD (Create, Read, Update, Delete) para o recurso de Categorias, deixando a funcionalidade completa.&#10;&#10;- Implementação dos endpoints:&#10;  - `GET /categorias/` para listar todas as categorias.&#10;  - `GET /categorias/&lt;id&gt;` para buscar uma categoria específica.&#10;  - `PUT /categorias/&lt;id&gt;` para atualizar uma categoria.&#10;  - `DELETE /categorias/&lt;id&gt;` para deletar uma categoria.&#10;&#10;- Realizada refatoração crucial para alinhar as responsabilidades das camadas, movendo a lógica de acesso ao banco de dados que estava no Service para o Repository.&#10;&#10;- Correção do erro de `AttributeError` causado pela indentação incorreta dos métodos na classe `CategoriaService`, garantindo que a arquitetura esteja corretamente implementada.">
      <option name="closed" value="true" />
      <created>1749594664600</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1749594664600</updated>
    </task>
    <option name="localTasksCounter" value="6" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="iniciando projeto" />
    <MESSAGE value="continuação do projeto&#10;&#10;- separar por categorias para melhor visão do trabalho no geral" />
    <MESSAGE value="feat: Implementa CRUD inicial de Categorias com Injeção de Dependência&#10;&#10;Este commit estabelece a primeira funcionalidade completa da API,&#10;permitindo a criação e listagem de categorias de produtos.&#10;&#10;Principais mudanças:&#10;- Criação do endpoint `POST /api/v1/categorias/` para adicionar novas categorias.&#10;- Criação do endpoint `GET /api/v1/categorias/` para listar todas as categorias cadastradas.&#10;- Implementação completa da arquitetura em camadas (Controller, Service, Repository, Model) para a funcionalidade de Categorias.&#10;- Refatoração do gerenciamento de dependências para utilizar o contexto do Flask (`g`) e hooks (`before_request`), desacoplando o controller da criação de serviços e repositórios.&#10;- Centralização do gerenciamento da conexão com o banco de dados (SQLite)." />
    <MESSAGE value="feat: Finaliza CRUD da API de Categorias e refatora camadas&#10;&#10;Finaliza a implementação de todas as operações CRUD (Create, Read, Update, Delete) para o recurso de Categorias, deixando a funcionalidade completa.&#10;&#10;- Implementação dos endpoints:&#10;  - `GET /categorias/` para listar todas as categorias.&#10;  - `GET /categorias/&lt;id&gt;` para buscar uma categoria específica.&#10;  - `PUT /categorias/&lt;id&gt;` para atualizar uma categoria.&#10;  - `DELETE /categorias/&lt;id&gt;` para deletar uma categoria.&#10;&#10;- Realizada refatoração crucial para alinhar as responsabilidades das camadas, movendo a lógica de acesso ao banco de dados que estava no Service para o Repository.&#10;&#10;- Correção do erro de `AttributeError` causado pela indentação incorreta dos métodos na classe `CategoriaService`, garantindo que a arquitetura esteja corretamente implementada." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: Finaliza CRUD da API de Categorias e refatora camadas&#10;&#10;Finaliza a implementação de todas as operações CRUD (Create, Read, Update, Delete) para o recurso de Categorias, deixando a funcionalidade completa.&#10;&#10;- Implementação dos endpoints:&#10;  - `GET /categorias/` para listar todas as categorias.&#10;  - `GET /categorias/&lt;id&gt;` para buscar uma categoria específica.&#10;  - `PUT /categorias/&lt;id&gt;` para atualizar uma categoria.&#10;  - `DELETE /categorias/&lt;id&gt;` para deletar uma categoria.&#10;&#10;- Realizada refatoração crucial para alinhar as responsabilidades das camadas, movendo a lógica de acesso ao banco de dados que estava no Service para o Repository.&#10;&#10;- Correção do erro de `AttributeError` causado pela indentação incorreta dos métodos na classe `CategoriaService`, garantindo que a arquitetura esteja corretamente implementada." />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/app/features/categorias/categoria_controller.py</url>
          <line>36</line>
          <option name="timeStamp" value="4" />
        </line-breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint type="python-exception">
          <properties notifyOnTerminate="true" exception="BaseException">
            <option name="notifyOnTerminate" value="true" />
          </properties>
        </breakpoint>
      </default-breakpoints>
    </breakpoint-manager>
  </component>
</project>